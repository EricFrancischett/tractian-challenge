// Mocks generated by Mockito 5.4.4 from annotations
// in tractian_challenge/test/features/home/home_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tractian_challenge/core/entities/asset/asset_entity.dart'
    as _i5;
import 'package:tractian_challenge/core/entities/location/location_entity.dart'
    as _i6;
import 'package:tractian_challenge/core/generics/resource.dart' as _i2;

import '../../helpers/get_it_tester_helper.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResource_0<T, E> extends _i1.SmartFake
    implements _i2.Resource<T, E> {
  _FakeResource_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockGetAssetsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockGetAssetsUsecase extends _i1.Mock
    implements _i3.MockGetAssetsUsecase {
  @override
  _i4.Future<_i2.Resource<List<_i5.AssetEntity>, Exception>> call(
          {required String? assetFilePath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#assetFilePath: assetFilePath},
        ),
        returnValue:
            _i4.Future<_i2.Resource<List<_i5.AssetEntity>, Exception>>.value(
                _FakeResource_0<List<_i5.AssetEntity>, Exception>(
          this,
          Invocation.method(
            #call,
            [],
            {#assetFilePath: assetFilePath},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Resource<List<_i5.AssetEntity>, Exception>>.value(
                _FakeResource_0<List<_i5.AssetEntity>, Exception>(
          this,
          Invocation.method(
            #call,
            [],
            {#assetFilePath: assetFilePath},
          ),
        )),
      ) as _i4.Future<_i2.Resource<List<_i5.AssetEntity>, Exception>>);
}

/// A class which mocks [MockGetLocationsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockGetLocationsUsecase extends _i1.Mock
    implements _i3.MockGetLocationsUsecase {
  @override
  _i4.Future<_i2.Resource<List<_i6.LocationEntity>, Exception>> call(
          {required String? locationsFilePath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#locationsFilePath: locationsFilePath},
        ),
        returnValue:
            _i4.Future<_i2.Resource<List<_i6.LocationEntity>, Exception>>.value(
                _FakeResource_0<List<_i6.LocationEntity>, Exception>(
          this,
          Invocation.method(
            #call,
            [],
            {#locationsFilePath: locationsFilePath},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Resource<List<_i6.LocationEntity>, Exception>>.value(
                _FakeResource_0<List<_i6.LocationEntity>, Exception>(
          this,
          Invocation.method(
            #call,
            [],
            {#locationsFilePath: locationsFilePath},
          ),
        )),
      ) as _i4.Future<_i2.Resource<List<_i6.LocationEntity>, Exception>>);
}
